import scipy.stats as stats
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

def plot(df, name):

    colors={"navie":"violet", "mu-l1":"red", "pu21-l1":"aquamarine", "pq-l1": "green", "linear-mu":"orange", "linear-pq":"pink", "linear-smape":"brown", "linear-pu":"coral", "linear-l1":"yellow"}
    palette=[]

    column_names = df.columns.tolist()

    for col_name in column_names:
        palette.append(colors[col_name])


    plt.figure(figsize=(26, 8))
    ax = sns.violinplot(data=df,cut = 0, palette=palette)  # remove the bars inside the violins

    if "psnr" in name:
        ax.set_ylim(20, 48)

    if "cvvdp" in name:
        ax.set_ylim(0, 10)

    if "ssim" in name:
        ax.set_ylim(0.5, 1.05)

    # for i in range(len(df.columns)):
    #     median_val = df.iloc[:, i].median()
    #     plt.text(i+0.13, median_val, f'{median_val:.3f}', horizontalalignment='left', size='x-small', color='black', weight='semibold')

    plt.show()
    plt.ylabel(name)
    plt.savefig(name + '.png')
    plt.clf()

def remove_elements(lst, indices):
    # Use a list comprehension to create a new list that only contains the elements you want to keep
    new_lst = [lst[i] for i in range(len(lst)) if i not in indices]
    return new_lst

# ********************************************* sadnet *********************************************
if 1:
    print("********************************************* edsr *********************************************")
    navie_psnr_rgb= [27.4211, 30.4608, 37.9217, 38.0559, 40.9145, 38.7223, 36.9719, 29.0116, 28.3901, 35.3632, 27.3601, 35.5831, 30.2345, 31.3551, 35.1584, 38.1576, 30.7998, 39.4898, 39.9545, 32.9647, 35.8777, 35.8174, 42.6028, 32.9637, 26.0756, 41.6341, 39.7692, 35.9639, 28.4125, 34.8447]
    linear_psnr_rgb= [27.6368, 30.0914, 38.8774, 38.9555, 42.2943, 39.0514, 37.5923, 20.137, 28.4538, 36.3446, 27.5309, 36.0486, 20.4016, 20.6533, 34.4952, 38.9748, 31.1079, 39.8349, 40.3933, 33.4384, 36.6938, 36.1047, 42.7043, 33.1979, 26.0726, 41.4137, 39.918, 36.9557, 28.2162, 35.5392]
    log_psnr_rgb= []
    pu_psnr_rgb= []
    pq_psnr_rgb= [27.9961, 30.372, 39.6841, 40.0846, 44.7227, 39.7238, 38.158, 32.0853, 28.4648, 37.0874, 28.0126, 36.5898, 32.3521, 33.8235, 36.9628, 39.6702, 32.1842, 40.5392, 41.3111, 34.1115, 38.2895, 36.7238, 43.0603, 35.215, 26.3461, 44.2349, 40.5328, 37.7667, 29.9589, 36.05]
    linear_smape_psnr_rgb= [27.0124, 27.4721, 36.0993, 34.226, 35.0753, 35.724, 35.2776, 24.162, 28.3077, 32.7012, 26.5883, 32.7893, 23.736, 24.2658, 31.0746, 34.3259, 29.0106, 36.1461, 34.6573, 31.212, 33.2759, 34.2059, 35.5603, 32.0167, 24.9207, 34.8405, 36.7388, 30.6483, 27.2059, 32.6712]
    linear_pu_psnr_rgb= [27.4131, 29.2531, 38.0833, 37.6669, 41.0853, 38.2452, 36.8907, 22.223, 28.2404, 35.4201, 27.1288, 35.5522, 23.5681, 25.58, 30.0495, 37.0886, 29.7284, 39.066, 37.7048, 32.6847, 35.9398, 35.4884, 40.7077, 32.7861, 25.6041, 32.707, 39.3683, 32.8016, 27.5403, 34.8671]
    linear_pq_psnr_rgb= [27.575, 28.6781, 38.4933, 38.2583, 41.7659, 38.4643, 37.1912, 21.1153, 28.4067, 35.7996, 27.4295, 35.8438, 21.6744, 22.812, 33.1292, 38.1538, 30.7638, 39.5051, 38.6889, 33.1246, 36.2498, 35.7602, 41.7185, 33.6949, 25.8969, 36.8883, 39.5779, 34.8544, 28.3988, 35.1946]
    linear_mu_psnr_rgb= [25.1796, 24.3664, 35.2068, 31.4609, 32.4445, 33.0945, 33.4563, 24.416, 28.3106, 30.6994, 24.1462, 30.8301, 24.7567, 26.1363, 25.1745, 30.1973, 25.2815, 33.6582, 30.2255, 28.8146, 30.8801, 32.1672, 31.5031, 29.2742, 24.3059, 29.4391, 35.3397, 25.1209, 23.5456, 31.3765]
    pu21_psnr_rgb= [27.9991, 30.3115, 39.8866, 40.3578, 44.8594, 39.8973, 38.3207, 32.666, 28.4661, 37.2111, 28.0053, 36.7815, 32.5956, 34.3533, 37.0245, 39.8081, 32.139, 40.657, 41.2617, 34.2625, 38.7072, 36.7349, 43.1598, 35.3647, 26.3696, 44.0435, 40.4121, 37.7616, 30.1016, 36.2026]
    mu_psnr_rgb= [28.0308, 30.3344, 39.7872, 40.2992, 44.935, 39.8337, 38.3251, 31.9026, 28.4653, 37.1866, 28.0184, 36.6957, 32.3541, 33.8032, 36.9918, 39.8786, 32.105, 40.6492, 41.1913, 34.287, 38.6602, 36.7471, 43.1537, 35.3358, 26.351, 44.0181, 40.4233, 37.6666, 30.1137, 36.0948]
    navie_psnr_y= [27.4952, 34.0364, 37.347, 37.497, 40.5512, 39.9094, 37.8644, 28.9407, 31.5346, 34.6117, 27.1014, 34.9592, 30.6233, 31.4525, 35.3689, 37.6623, 30.1487, 39.148, 40.0009, 32.1707, 35.0968, 36.6807, 43.341, 32.9557, 26.996, 42.0196, 42.5564, 36.6622, 28.5864, 34.1077]
    linear_psnr_y= [27.9607, 33.6285, 38.5487, 38.549, 42.212, 40.7542, 39.0736, 19.8911, 31.5642, 35.7413, 27.4816, 35.5885, 20.3086, 20.3854, 35.5981, 38.6431, 30.7491, 39.6162, 40.8518, 32.7783, 36.0139, 37.327, 43.6836, 33.5534, 27.0149, 42.9899, 43.2016, 38.365, 28.9575, 34.8738]
    log_psnr_y= []
    pu_psnr_y= []
    pq_psnr_y= [28.1238, 33.6976, 39.6211, 39.8891, 44.9927, 41.3797, 39.6997, 32.9754, 31.5959, 36.7442, 27.7834, 36.1645, 33.5183, 34.7888, 37.4938, 39.3247, 31.601, 40.4555, 41.5821, 33.4616, 37.7737, 37.742, 44.0243, 35.465, 27.3212, 45.0438, 43.2819, 38.8749, 30.266, 35.4381]
    linear_smape_psnr_y= [27.6539, 30.451, 36.6878, 34.8202, 35.4388, 37.9322, 37.0567, 23.7549, 30.8218, 32.947, 27.1961, 32.8507, 23.4839, 23.796, 34.8119, 35.3926, 29.8139, 37.2249, 35.6863, 31.3958, 33.5939, 35.8078, 36.6517, 32.7452, 26.0183, 36.2362, 39.2939, 34.6507, 28.6667, 32.7224]
    linear_pu_psnr_y= [27.8035, 32.4819, 37.9472, 37.8563, 41.6605, 40.0344, 38.2462, 22.5134, 31.4368, 35.123, 27.4098, 35.3253, 23.4294, 25.2037, 34.9042, 37.9961, 30.4673, 39.4891, 38.5706, 32.4975, 35.6564, 36.9356, 42.7851, 33.1312, 26.7902, 39.9305, 42.4557, 36.2466, 28.9195, 34.4692]
    linear_pq_psnr_y= [28.0171, 32.1228, 38.3978, 38.2842, 42.1192, 40.5669, 38.9456, 21.4049, 31.8786, 35.5963, 27.5158, 35.6145, 21.4703, 22.3745, 35.6187, 38.2726, 30.8176, 39.9119, 39.8693, 32.7561, 36.045, 37.3201, 42.6172, 34.1203, 26.9411, 42.0799, 43.0263, 36.5554, 29.316, 34.8117]
    linear_mu_psnr_y= [26.7266, 26.5429, 35.3415, 32.1745, 33.1891, 34.9682, 34.8247, 24.7583, 31.8843, 31.372, 25.6318, 31.1753, 25.351, 26.2092, 28.428, 31.8906, 27.3758, 35.3634, 31.6433, 29.5408, 31.2517, 33.5492, 32.6659, 30.2945, 25.5546, 32.098, 36.6766, 27.4345, 26.2196, 31.6088]
    pu21_psnr_y= [28.1595, 33.6042, 39.84, 40.2301, 45.1101, 41.7902, 40.0931, 34.0546, 31.6385, 37.0244, 27.7977, 36.4109, 34.1923, 35.8697, 37.6248, 39.5366, 31.5867, 40.6062, 41.5652, 33.6215, 38.1779, 37.8611, 44.2509, 35.634, 27.352, 45.0085, 43.1927, 38.9207, 30.45, 35.6311]
    mu_psnr_y= [28.1814, 33.643, 39.679, 40.1923, 45.1727, 41.6116, 40.1025, 32.4912, 31.6716, 36.933, 27.8, 36.2868, 33.2657, 34.4103, 37.5744, 39.5905, 31.5286, 40.6126, 41.5068, 33.6398, 38.1804, 37.8468, 44.2096, 35.608, 27.3323, 44.803, 43.0475, 38.8202, 30.454, 35.5077]
    navie_cvvdp= [6.0099, 7.0789, 7.7208, 7.791, 8.3854, 8.4183, 7.9962, 8.1735, 5.6123, 7.5263, 5.7873, 7.2824, 7.4888, 7.1252, 7.4757, 7.8083, 6.4357, 7.4288, 7.7738, 6.8711, 7.4742, 7.4512, 8.1572, 7.5882, 5.4098, 8.7537, 8.6477, 7.8194, 6.6962, 7.3198]
    linear_cvvdp= [6.3065, 7.1192, 8.0148, 8.067, 8.5721, 8.5903, 8.2299, 7.8267, 5.8407, 7.8277, 6.0885, 7.5594, 7.536, 7.2647, 7.7097, 8.0573, 6.8039, 7.6782, 8.0816, 7.1607, 7.7103, 7.6664, 8.1965, 7.8422, 5.4596, 8.9132, 8.7822, 8.1662, 6.9794, 7.5514]
    log_cvvdp= []
    pu_cvvdp= []
    pq_cvvdp= [6.345, 7.0476, 8.0883, 8.1472, 8.6415, 8.6462, 8.2741, 8.2711, 5.8559, 8.0123, 6.1664, 7.6311, 7.9106, 7.6088, 7.8012, 8.1316, 6.9497, 7.7008, 8.114, 7.2409, 7.7781, 7.6898, 8.1561, 7.9577, 5.4726, 8.9305, 8.7812, 8.213, 7.1669, 7.6429]
    linear_smape_cvvdp= [6.1602, 6.863, 7.8583, 7.7324, 7.7854, 8.4214, 8.1072, 8.0115, 5.799, 7.505, 5.9198, 7.2772, 7.5108, 7.2766, 7.5276, 7.7426, 6.5115, 7.5037, 7.6936, 6.9223, 7.4716, 7.5334, 7.8201, 7.6556, 5.4331, 8.1855, 8.4975, 7.8134, 6.7654, 7.3077]
    linear_pu_cvvdp= [6.162, 6.997, 7.8716, 7.8783, 8.4084, 8.4826, 8.0995, 8.0103, 5.8709, 7.6402, 5.9356, 7.3944, 7.5279, 7.261, 7.5485, 7.899, 6.5276, 7.5653, 7.8748, 6.9697, 7.5608, 7.5297, 8.0849, 7.7112, 5.4877, 8.5722, 8.6579, 7.9477, 6.8039, 7.4189]
    linear_pq_cvvdp= [6.2566, 7.0209, 7.9716, 8.0188, 8.5576, 8.5498, 8.1975, 7.9334, 5.8509, 7.779, 6.0381, 7.5275, 7.4185, 7.044, 7.66, 8.0157, 6.7163, 7.661, 8.0048, 7.1084, 7.6775, 7.6361, 8.1706, 7.795, 5.4795, 8.8107, 8.741, 8.0792, 6.9266, 7.5146]
    linear_mu_cvvdp= [5.9749, 6.6733, 7.7149, 7.546, 7.7317, 8.2792, 7.8912, 7.9469, 5.6846, 7.3382, 5.7092, 7.1418, 7.3054, 7.1551, 7.1814, 7.5143, 6.0507, 7.325, 7.5096, 6.6903, 7.3275, 7.3167, 7.7231, 7.4579, 5.4889, 8.0864, 8.4127, 7.3513, 6.5006, 7.171]
    pu21_cvvdp= [6.3685, 7.0106, 8.116, 8.1603, 8.6336, 8.7204, 8.3519, 8.3072, 5.8576, 8.0734, 6.1714, 7.7007, 7.9285, 7.5906, 7.8264, 8.1639, 6.9438, 7.6975, 8.0721, 7.2581, 7.7917, 7.7457, 8.1761, 7.9854, 5.479, 8.8855, 8.8062, 8.2171, 7.2316, 7.6865]
    mu_cvvdp= [6.3621, 7.0479, 8.0973, 8.1515, 8.6438, 8.6952, 8.3776, 8.3022, 5.8668, 8.0392, 6.1589, 7.6416, 7.9144, 7.5732, 7.7888, 8.1575, 6.9032, 7.7046, 8.0595, 7.2475, 7.778, 7.7902, 8.1928, 7.9719, 5.4762, 8.8451, 8.8059, 8.1727, 7.1943, 7.6514]
    navie_ssim= [0.7753, 0.8585, 0.9692, 0.9651, 0.9862, 0.9852, 0.9697, 0.9716, 0.6698, 0.9515, 0.7405, 0.9393, 0.9468, 0.9303, 0.9422, 0.9604, 0.8526, 0.9531, 0.9593, 0.8998, 0.9554, 0.9506, 0.9725, 0.95, 0.3421, 0.9898, 0.9913, 0.9537, 0.8791, 0.9411]
    linear_ssim= [0.7994, 0.8591, 0.9732, 0.969, 0.9866, 0.9865, 0.9728, 0.9716, 0.6755, 0.9579, 0.7671, 0.9451, 0.9516, 0.9383, 0.9473, 0.9654, 0.8703, 0.9563, 0.963, 0.9094, 0.9578, 0.9536, 0.9726, 0.9557, 0.3453, 0.9899, 0.9917, 0.9623, 0.8929, 0.9462]
    pu_ssim= []
    pq_ssim= [0.8007, 0.8567, 0.9753, 0.9711, 0.9885, 0.9873, 0.9742, 0.9726, 0.6742, 0.964, 0.7726, 0.9479, 0.9575, 0.9413, 0.9515, 0.9675, 0.8801, 0.9573, 0.9645, 0.9129, 0.9603, 0.9548, 0.9724, 0.9609, 0.3477, 0.9915, 0.9917, 0.9636, 0.9046, 0.9495]
    linear_smape_ssim= [0.7871, 0.8493, 0.9716, 0.9657, 0.984, 0.9837, 0.9706, 0.9703, 0.6718, 0.954, 0.7542, 0.9412, 0.9492, 0.9361, 0.9386, 0.9614, 0.8608, 0.9543, 0.9566, 0.9036, 0.9546, 0.9508, 0.9692, 0.9517, 0.3106, 0.9859, 0.9899, 0.9533, 0.8835, 0.9429]
    linear_pu_ssim= [0.7884, 0.8492, 0.9709, 0.9652, 0.984, 0.9848, 0.9704, 0.9714, 0.6838, 0.9542, 0.7558, 0.9408, 0.9486, 0.9345, 0.9396, 0.9616, 0.8606, 0.955, 0.9574, 0.9033, 0.9547, 0.951, 0.97, 0.9512, 0.349, 0.9851, 0.9903, 0.9544, 0.885, 0.9432]
    linear_pq_ssim= [0.7953, 0.8559, 0.9725, 0.9675, 0.9856, 0.9853, 0.9718, 0.9717, 0.677, 0.9565, 0.7635, 0.9439, 0.9502, 0.9373, 0.9444, 0.9638, 0.8678, 0.9559, 0.9601, 0.9073, 0.9567, 0.9528, 0.9713, 0.9543, 0.3565, 0.9885, 0.991, 0.9584, 0.8907, 0.945]
    linear_mu_ssim= [0.7737, 0.8333, 0.967, 0.9598, 0.9804, 0.9803, 0.9648, 0.9674, 0.6674, 0.9461, 0.7379, 0.9351, 0.9404, 0.9278, 0.9311, 0.9554, 0.8426, 0.9499, 0.951, 0.8936, 0.9494, 0.9454, 0.9677, 0.9418, 0.3542, 0.9807, 0.9875, 0.9462, 0.8716, 0.9362]
    pu21_ssim= [0.8013, 0.8548, 0.9762, 0.9713, 0.9885, 0.9881, 0.9757, 0.9729, 0.6765, 0.9659, 0.7725, 0.9508, 0.958, 0.9406, 0.9515, 0.9681, 0.8797, 0.9576, 0.9636, 0.9134, 0.9606, 0.9565, 0.9727, 0.9617, 0.3501, 0.9911, 0.9918, 0.9627, 0.9074, 0.9509]
    mu_ssim= [0.8021, 0.8564, 0.9759, 0.9712, 0.9888, 0.9878, 0.9762, 0.9727, 0.6782, 0.9653, 0.7721, 0.9491, 0.9576, 0.9403, 0.9514, 0.9683, 0.8777, 0.9579, 0.9636, 0.9134, 0.9606, 0.9577, 0.9729, 0.9613, 0.3491, 0.9907, 0.9918, 0.9621, 0.9066, 0.9501]


    # Perform t-test
    t_statistic, p_value = stats.ttest_ind(linear_ssim, pu21_ssim)
    print('t statistic:', t_statistic)
    print('p value:', p_value)

    navie_psnr_rgb = np.array(navie_psnr_rgb)
    linear_psnr_rgb = np.array(linear_psnr_rgb)
    pu21_psnr_rgb = np.array(pu21_psnr_rgb)
    pq_psnr_rgb = np.array(pq_psnr_rgb)
    linear_smape_psnr_rgb = np.array(linear_smape_psnr_rgb)
    linear_pu_psnr_rgb = np.array(linear_pu_psnr_rgb)
    linear_pq_psnr_rgb = np.array(linear_pq_psnr_rgb)
    linear_mu_psnr_rgb = np.array(linear_mu_psnr_rgb)
    mu_l1_psnr_rgb = np.array(mu_psnr_rgb)
    pu21_psnr_rgb = np.array(pu21_psnr_rgb)

    psnr_rgb_df = pd.DataFrame({'pq-l1': pq_psnr_rgb, 'mu-l1': mu_l1_psnr_rgb, 'linear-mu': linear_mu_psnr_rgb, 'linear-smape': linear_smape_psnr_rgb, 'linear-pu': linear_pu_psnr_rgb, 'linear-pq': linear_pq_psnr_rgb, 'linear-l1': linear_psnr_rgb, 'pu21-l1': pu21_psnr_rgb, "navie": navie_psnr_rgb,})

    print(np.median(navie_psnr_rgb), np.median(linear_psnr_rgb), np.median(pu21_psnr_rgb), np.median(pq_psnr_rgb), np.median(linear_smape_psnr_rgb), np.median(linear_pu_psnr_rgb), np.median(linear_pq_psnr_rgb), np.median(linear_mu_psnr_rgb), np.median(mu_l1_psnr_rgb), np.median(mu_l1_psnr_rgb), np.median(pu21_psnr_rgb))
    print('\n')

    navie_psnr_y = np.array(navie_psnr_y)
    linear_psnr_y = np.array(linear_psnr_y)
    pu21_psnr_y = np.array(pu21_psnr_y)
    pq_psnr_y = np.array(pq_psnr_y)
    linear_smape_psnr_y = np.array(linear_smape_psnr_y)
    linear_pu_psnr_y = np.array(linear_pu_psnr_y)
    linear_pq_psnr_y = np.array(linear_pq_psnr_y)
    linear_mu_psnr_y = np.array(linear_mu_psnr_y)
    mu_l1_psnr_y = np.array(mu_psnr_y)
    pu21_psnr_y = np.array(pu21_psnr_y)

    print(np.median(navie_psnr_y), np.median(linear_psnr_y), np.median(pu21_psnr_y), np.median(pq_psnr_y), np.median(linear_smape_psnr_y), np.median(linear_pu_psnr_y), np.median(linear_pq_psnr_y), np.median(linear_mu_psnr_y), np.median(mu_l1_psnr_y), np.median(mu_l1_psnr_y), np.median(pu21_psnr_y))
    print('\n')

    psnr_y_df = pd.DataFrame({ 'pq-l1': pq_psnr_y, 'mu-l1': mu_l1_psnr_y, 'linear-smape': linear_smape_psnr_y, 'linear-pu': linear_pu_psnr_y, 'linear-mu': linear_mu_psnr_y, 'linear-l1': linear_psnr_y, 'linear-pq': linear_pq_psnr_y, 'pu21-l1': pu21_psnr_y})

    navie_cvvdp = np.array(navie_cvvdp)
    linear_cvvdp = np.array(linear_cvvdp)
    pu21_cvvdp = np.array(pu21_cvvdp)
    pq_cvvdp = np.array(pq_cvvdp)
    linear_smape_cvvdp = np.array(linear_smape_cvvdp)
    linear_pu_cvvdp = np.array(linear_pu_cvvdp)
    linear_pq_cvvdp = np.array(linear_pq_cvvdp)
    linear_mu_cvvdp = np.array(linear_mu_cvvdp)
    mu_l1_cvvdp = np.array(mu_cvvdp)
    pu21_cvvdp = np.array(pu21_cvvdp)
    # print(np.mean(navie_cvvdp), np.mean(linear_cvvdp), np.mean(pu_cvvdp), np.mean(pq_cvvdp))
    # cvvdp_df = pd.DataFrame({'navie_cvvdp': navie_cvvdp, 'linear_cvvdp': linear_cvvdp, 'pu_cvvdp': pu_cvvdp, 'pq_cvvdp': pq_cvvdp})

    print(np.median(navie_cvvdp), np.median(linear_cvvdp), np.median(pu21_cvvdp), np.median(pq_cvvdp), np.median(linear_smape_cvvdp), np.median(linear_pu_cvvdp), np.median(linear_pq_cvvdp), np.median(linear_mu_cvvdp), np.median(mu_l1_cvvdp), np.median(mu_l1_cvvdp), np.median(pu21_cvvdp))
    print('\n')


    # cvvdp_df = pd.DataFrame({'linear_l1': linear_cvvdp, 'linear_smape': linear_smape_cvvdp, 'linear_pu': linear_pu_cvvdp, 'linear_pq':linear_pq_cvvdp, 'linear_mu': linear_mu_cvvdp, 'pu_l1': pu_cvvdp, 'pq_l1': pq_cvvdp, 'mu_l1': mu_l1_cvvdp, 'pu21_l1': pu21_cvvdp})

    cvvdp_df = pd.DataFrame({'pq-l1': pq_cvvdp, 'linear-pu': linear_pu_cvvdp, 'linear-l1': linear_cvvdp, 'linear-smape': linear_smape_cvvdp, 'linear-pq': linear_pq_cvvdp, 'linear-mu': linear_mu_cvvdp, 'mu-l1': mu_l1_cvvdp, 'pu21-l1': pu21_cvvdp, "navie": navie_cvvdp,})

    linear_ssim = np.array(linear_ssim)
    pu21_ssim = np.array(pu21_ssim)
    pq_ssim = np.array(pq_ssim)
    linear_smape_ssim = np.array(linear_smape_ssim)
    linear_pu_ssim = np.array(linear_pu_ssim)
    linear_pq_ssim = np.array(linear_pq_ssim)
    linear_mu_ssim = np.array(linear_mu_ssim)
    mu_l1_ssim = np.array(mu_ssim)
    pu21_ssim = np.array(pu21_ssim)

    print(np.median(navie_ssim), np.median(linear_ssim), np.median(pu21_ssim), np.median(pq_ssim), np.median(linear_smape_ssim), np.median(linear_pu_ssim), np.median(linear_pq_ssim), np.median(linear_mu_ssim), np.median(mu_l1_ssim), np.median(mu_l1_ssim), np.median(pu21_ssim))
    print('\n')


    ssim_df = pd.DataFrame({'pq-l1': pq_ssim, 'pu21-l1': pu21_ssim, 'mu-l1': mu_l1_ssim, 'linear-pu': linear_pu_ssim, 'linear-pq': linear_pq_ssim, 'linear-smape': linear_smape_ssim, 'linear-mu': linear_mu_ssim, 'linear-l1': linear_ssim, 'navie': navie_ssim,})


    sns.set_theme(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1.8, color_codes=True, rc=None)

    plot(psnr_rgb_df, "sad_psnr-rgb")

    plot(psnr_y_df, "sad_psnr-y")

    plot(cvvdp_df, "sad_cvvdp")

    plot(ssim_df, "sad_ssim")



# ********************************************* dncnn *********************************************
if 1:
    print("********************************************* real *********************************************")
    navie_psnr_rgb= [27.4211, 30.4608, 37.9217, 38.0559, 40.9145, 38.7223, 36.9719, 29.0116, 28.3901, 35.3632, 27.3601, 35.5831, 30.2345, 31.3551, 35.1584, 38.1576, 30.7998, 39.4898, 39.9545, 32.9647, 35.8777, 35.8174, 42.6028, 32.9637, 26.0756, 41.6341, 39.7692, 35.9639, 28.4125, 34.8447]
    linear_psnr_rgb= [24.4791, 26.4868, 37.8043, 37.1535, 40.8859, 37.7131, 36.4604, 24.286, 28.0604, 34.849, 24.691, 34.4283, 23.1845, 23.0914, 31.98, 35.8221, 27.4284, 36.2857, 36.6753, 30.3958, 36.2876, 34.1211, 40.15, 32.2223, 26.0289, 37.0186, 38.5892, 33.0712, 26.2078, 33.0205]
    log_psnr_rgb= []
    pu_psnr_rgb= []
    pq_psnr_rgb= [25.8301, 28.23, 36.5792, 36.4663, 40.081, 35.3662, 35.5904, 32.3096, 27.924, 34.4724, 25.3655, 34.4819, 29.559, 32.8788, 31.6176, 35.2021, 28.6172, 35.7143, 35.9916, 31.3338, 35.7394, 32.9805, 37.6027, 32.485, 26.1226, 35.4211, 37.2054, 32.596, 26.5228, 33.2761]
    linear_smape_psnr_rgb= [24.3196, 25.0781, 37.5648, 37.4539, 41.4172, 37.6432, 36.1845, 23.9956, 27.9302, 34.6903, 24.2089, 34.4716, 23.2475, 22.4977, 31.0068, 35.9192, 27.7213, 37.0634, 36.3465, 30.6368, 36.2722, 34.1866, 39.8551, 32.5371, 26.0175, 35.0623, 38.1012, 32.1731, 25.667, 33.2813]
    linear_pu_psnr_rgb= [24.8806, 26.148, 37.4126, 36.1358, 40.0594, 35.9908, 35.6113, 23.2442, 28.1383, 34.1652, 24.4076, 33.9498, 22.5082, 22.08, 31.4606, 34.4078, 27.1526, 35.4705, 34.3715, 30.3295, 35.0656, 33.6553, 37.2611, 32.0125, 26.196, 32.7802, 37.8556, 31.334, 25.4297, 33.0254]
    linear_pq_psnr_rgb= [25.815, 26.5453, 37.9145, 38.1789, 41.2236, 37.9996, 36.5894, 24.4936, 28.2591, 35.2613, 25.4802, 34.732, 22.9673, 23.3837, 32.0109, 36.2966, 28.3208, 36.1839, 36.9939, 31.7339, 36.8788, 34.7405, 40.8872, 32.5358, 26.1033, 38.2228, 38.5263, 33.472, 26.362, 33.5793]
    linear_mu_psnr_rgb= [25.5113, 25.3305, 37.8861, 37.6305, 41.2424, 37.3754, 36.3551, 24.0043, 28.0841, 34.7141, 25.0322, 34.7532, 22.0705, 22.5065, 31.8237, 35.416, 27.922, 35.6295, 36.6799, 30.9539, 35.8712, 34.2244, 39.7764, 32.2903, 26.071, 37.0382, 38.5117, 32.4085, 26.1002, 33.821]
    pu21_psnr_rgb= [26.3786, 28.5347, 38.1255, 37.8986, 42.4169, 37.231, 36.459, 32.8688, 28.2847, 35.4311, 25.7722, 34.8649, 30.6189, 33.6707, 32.1553, 36.4912, 28.7727, 36.8282, 36.7246, 31.8744, 36.8797, 34.7611, 39.999, 33.6436, 26.2236, 34.2283, 37.8185, 32.8448, 26.7246, 34.0627]
    mu_psnr_rgb= [26.3894, 28.4176, 37.7651, 37.5934, 41.3206, 37.7789, 36.8979, 31.8758, 28.3432, 35.355, 26.0767, 35.0705, 30.7762, 33.063, 33.0437, 37.044, 28.9077, 37.1012, 37.2529, 31.8095, 35.7376, 34.8233, 39.7711, 33.1138, 26.2361, 36.5192, 37.7633, 33.1982, 27.2603, 33.7694]
    navie_psnr_y= [27.4952, 34.0364, 37.347, 37.497, 40.5512, 39.9094, 37.8644, 28.9407, 31.5346, 34.6117, 27.1014, 34.9592, 30.6233, 31.4525, 35.3689, 37.6623, 30.1487, 39.148, 40.0009, 32.1707, 35.0968, 36.6807, 43.341, 32.9557, 26.996, 42.0196, 42.5564, 36.6622, 28.5864, 34.1077]
    linear_psnr_y= [26.2762, 27.3, 38.6474, 38.5527, 43.1299, 41.0147, 39.1055, 24.0836, 31.4471, 36.0424, 25.8823, 34.9971, 22.688, 22.3665, 34.8481, 37.2391, 28.9228, 37.5466, 38.5264, 31.2856, 37.2704, 36.0846, 42.6381, 33.4925, 26.8219, 41.6137, 41.9287, 35.8376, 28.1547, 33.5427]
    log_psnr_y= []
    pu_psnr_y= []
    pq_psnr_y= [27.044, 31.3522, 38.4008, 37.4319, 40.8712, 38.1413, 37.7379, 33.2734, 30.1422, 35.1464, 26.233, 34.9136, 32.7468, 33.8807, 34.8992, 36.5196, 29.5474, 36.8149, 37.2139, 31.7336, 36.2013, 34.698, 39.3154, 33.674, 27.0189, 41.2646, 40.2842, 35.3959, 28.7937, 33.6251]
    linear_smape_psnr_y= [26.5102, 25.1653, 38.8937, 38.9832, 43.285, 40.5766, 38.5757, 23.8399, 31.4745, 35.7534, 25.7749, 35.0323, 22.5448, 22.0039, 35.1931, 37.3803, 29.1959, 38.4536, 38.3628, 31.375, 37.1411, 36.0929, 42.2489, 33.7912, 26.9744, 39.3052, 41.2485, 35.8851, 28.2712, 33.7687]
    linear_pu_psnr_y= [26.4942, 27.2756, 38.286, 37.7506, 41.8525, 39.6138, 38.2153, 21.5506, 30.8749, 35.3895, 25.7615, 34.6853, 22.3029, 21.8684, 35.1833, 36.3287, 28.9315, 36.8146, 37.0117, 31.1961, 36.3436, 35.421, 40.3266, 33.4845, 27.1244, 38.9716, 41.1879, 35.1245, 27.9571, 33.6535]
    linear_pq_psnr_y= [27.1408, 27.7829, 38.8824, 39.171, 43.0925, 40.8938, 39.1253, 23.4651, 31.5003, 36.2878, 26.3678, 35.2813, 22.0203, 22.6242, 35.1328, 37.6068, 29.6171, 37.7843, 38.7563, 32.0945, 37.5069, 36.4727, 42.6532, 33.797, 27.0017, 42.3741, 42.1237, 36.3059, 28.4767, 34.2126]
    linear_mu_psnr_y= [26.8945, 25.781, 38.7178, 38.73, 43.1796, 40.5959, 38.8933, 23.6706, 31.1688, 35.8344, 26.0205, 35.2121, 21.3565, 21.6918, 35.5131, 37.313, 29.2253, 37.324, 38.2748, 31.5695, 37.2537, 35.9034, 41.6557, 33.6618, 27.0152, 41.3787, 41.8568, 35.9696, 28.4366, 34.2738]
    pu21_psnr_y= [27.3061, 31.8523, 39.324, 38.9749, 44.0134, 40.4773, 38.9991, 34.3631, 31.3559, 36.0809, 26.2894, 35.2156, 33.386, 34.5091, 35.8192, 37.9321, 29.7565, 37.9436, 38.5656, 32.1015, 37.5185, 36.5059, 42.7028, 34.5256, 27.2156, 39.5319, 41.4606, 35.7876, 28.9104, 34.1776]
    mu_psnr_y= [27.3663, 31.5462, 39.0165, 38.2164, 43.1714, 39.8331, 38.8442, 32.9786, 30.9436, 36.0803, 26.5087, 35.4776, 32.7917, 33.9836, 35.4393, 37.8604, 29.8437, 37.6706, 38.9763, 31.8518, 35.891, 36.2997, 41.6994, 33.998, 27.1689, 41.8189, 40.7615, 35.9267, 28.9595, 34.0891]
    navie_cvvdp= [6.0099, 7.0789, 7.7208, 7.791, 8.3854, 8.4183, 7.9962, 8.1735, 5.6123, 7.5263, 5.7873, 7.2824, 7.4888, 7.1252, 7.4757, 7.8083, 6.4357, 7.4288, 7.7738, 6.8711, 7.4742, 7.4512, 8.1572, 7.5882, 5.4098, 8.7537, 8.6477, 7.8194, 6.6962, 7.3198]
    linear_cvvdp= [6.1071, 6.2263, 7.857, 7.7903, 8.4031, 8.5203, 8.0532, 7.8207, 5.7361, 8.0213, 5.798, 7.5642, 7.4469, 6.8425, 7.4892, 7.8929, 6.3734, 7.153, 7.561, 6.8133, 7.395, 7.3434, 7.8847, 7.7061, 5.4968, 8.6655, 8.5538, 7.7244, 6.9231, 7.3742]
    log_cvvdp= []
    pu_cvvdp= []
    pq_cvvdp= [6.1468, 6.5872, 7.994, 7.7801, 8.472, 8.5114, 8.0478, 7.9666, 5.7257, 7.9059, 5.7696, 7.5803, 7.6093, 6.9425, 7.5175, 7.8543, 6.485, 7.2367, 7.649, 6.8551, 7.454, 7.3367, 7.9146, 7.745, 5.4868, 8.7277, 8.7177, 7.7303, 7.0049, 7.4368]
    linear_smape_cvvdp= [6.1227, 6.0213, 7.8778, 7.8478, 8.3732, 8.5494, 8.1051, 7.7837, 5.7109, 7.9527, 5.7588, 7.4901, 7.5085, 6.9094, 7.5645, 7.8834, 6.4303, 7.2858, 7.5749, 6.8391, 7.4262, 7.4875, 7.9442, 7.7301, 5.4784, 8.7023, 8.6071, 7.8476, 6.9688, 7.4347]
    linear_pu_cvvdp= [6.0925, 6.2697, 7.7436, 7.7929, 8.3837, 8.463, 7.9428, 7.7694, 5.7031, 7.9181, 5.7466, 7.4932, 7.466, 6.9269, 7.5547, 7.7789, 6.4225, 7.0687, 7.5344, 6.7979, 7.4025, 7.2323, 7.9662, 7.6877, 5.4946, 8.7734, 8.5352, 7.7553, 6.9063, 7.3971]
    linear_pq_cvvdp= [6.2089, 6.2078, 7.9579, 7.9232, 8.4892, 8.5835, 8.149, 7.8614, 5.7641, 8.0497, 5.8633, 7.5858, 7.5689, 7.1182, 7.5504, 7.918, 6.5232, 7.276, 7.633, 6.9445, 7.5627, 7.4886, 7.9693, 7.7916, 5.496, 8.7071, 8.6368, 7.9075, 6.9632, 7.4854]
    linear_mu_cvvdp= [6.1453, 6.0207, 7.8818, 7.8361, 8.3988, 8.6011, 8.0251, 7.8194, 5.7392, 7.96, 5.7864, 7.5735, 7.4402, 6.9559, 7.4849, 7.8365, 6.4065, 7.1277, 7.5128, 6.8351, 7.4528, 7.2954, 7.9093, 7.7308, 5.4955, 8.7229, 8.5724, 7.7448, 6.939, 7.5017]
    pu21_cvvdp= [6.1215, 6.6866, 7.9534, 7.8469, 8.3778, 8.5079, 8.1928, 8.0064, 5.7504, 7.9413, 5.7507, 7.5345, 7.7191, 7.0108, 7.5576, 7.9643, 6.4958, 7.335, 7.6364, 6.8732, 7.4558, 7.5335, 7.9676, 7.7953, 5.4956, 8.7332, 8.7241, 7.7119, 6.9898, 7.4115]
    mu_cvvdp= [6.1581, 6.6483, 7.9803, 7.8578, 8.4842, 8.5743, 8.0822, 7.9508, 5.7499, 8.0105, 5.8072, 7.6439, 7.6829, 7.0488, 7.5699, 7.9657, 6.5834, 7.2601, 7.7258, 6.9026, 7.4307, 7.3968, 7.9187, 7.7629, 5.4942, 8.751, 8.682, 7.8389, 7.0516, 7.4636]
    navie_ssim= [0.7753, 0.8585, 0.9692, 0.9651, 0.9862, 0.9852, 0.9697, 0.9716, 0.6698, 0.9515, 0.7405, 0.9393, 0.9468, 0.9303, 0.9422, 0.9604, 0.8526, 0.9531, 0.9593, 0.8998, 0.9554, 0.9506, 0.9725, 0.95, 0.3421, 0.9898, 0.9913, 0.9537, 0.8791, 0.9411]
    linear_ssim= [0.7474, 0.8041, 0.9623, 0.9514, 0.9803, 0.9809, 0.9633, 0.9617, 0.6537, 0.9558, 0.6904, 0.9333, 0.9359, 0.8934, 0.9228, 0.9502, 0.7877, 0.9221, 0.9276, 0.8581, 0.9348, 0.9256, 0.9604, 0.9401, 0.3449, 0.9804, 0.985, 0.9317, 0.8707, 0.9258]
    pu_ssim= []
    pq_ssim= [0.7573, 0.7965, 0.9657, 0.9506, 0.9818, 0.979, 0.962, 0.961, 0.6544, 0.9498, 0.6902, 0.9338, 0.9357, 0.8964, 0.9237, 0.9483, 0.8044, 0.9267, 0.9307, 0.8639, 0.9384, 0.9228, 0.9598, 0.9416, 0.3409, 0.9824, 0.987, 0.9229, 0.8735, 0.9299]
    linear_smape_ssim= [0.7483, 0.8033, 0.9613, 0.955, 0.9802, 0.9818, 0.9639, 0.9617, 0.6488, 0.9526, 0.6808, 0.9315, 0.9376, 0.9004, 0.9307, 0.9512, 0.7956, 0.9305, 0.9297, 0.8603, 0.9371, 0.9333, 0.9621, 0.9425, 0.3364, 0.9831, 0.9859, 0.9383, 0.8747, 0.9297]
    linear_pu_ssim= [0.7456, 0.8095, 0.9566, 0.9514, 0.9804, 0.9792, 0.9584, 0.9612, 0.6498, 0.9503, 0.6818, 0.929, 0.9357, 0.8955, 0.9293, 0.946, 0.7956, 0.9211, 0.926, 0.8578, 0.9368, 0.9177, 0.9624, 0.9398, 0.343, 0.9831, 0.9846, 0.9286, 0.8701, 0.9271]
    linear_pq_ssim= [0.7669, 0.8051, 0.9647, 0.9579, 0.9816, 0.9816, 0.9661, 0.9633, 0.6545, 0.9577, 0.7081, 0.937, 0.9434, 0.9126, 0.9302, 0.9523, 0.8133, 0.9273, 0.9279, 0.8734, 0.9429, 0.9333, 0.9616, 0.946, 0.3425, 0.9814, 0.9859, 0.9412, 0.8776, 0.9331]
    linear_mu_ssim= [0.7567, 0.7968, 0.9622, 0.955, 0.9802, 0.9827, 0.9628, 0.9596, 0.6505, 0.954, 0.6911, 0.9345, 0.9347, 0.9014, 0.924, 0.9491, 0.7968, 0.922, 0.9229, 0.8639, 0.9388, 0.9243, 0.9617, 0.9425, 0.3418, 0.9811, 0.9857, 0.9321, 0.8714, 0.9339]
    pu21_ssim= [0.7582, 0.8065, 0.9651, 0.9563, 0.9804, 0.9818, 0.9677, 0.9619, 0.6541, 0.9548, 0.6886, 0.9341, 0.943, 0.9044, 0.9276, 0.9542, 0.8131, 0.9294, 0.9315, 0.871, 0.941, 0.939, 0.9626, 0.9463, 0.3436, 0.9816, 0.9875, 0.9272, 0.8749, 0.9307]
    mu_ssim= [0.7671, 0.8042, 0.9655, 0.9568, 0.9822, 0.9827, 0.9647, 0.9606, 0.6555, 0.9569, 0.7072, 0.9395, 0.9409, 0.9039, 0.9314, 0.9563, 0.8277, 0.9286, 0.9387, 0.8768, 0.9386, 0.9312, 0.9618, 0.9448, 0.3424, 0.983, 0.9866, 0.9372, 0.8814, 0.9329]


    # Perform t-test
    # Perform t-test
    t_statistic, p_value = stats.ttest_ind(linear_ssim, pu21_ssim)
    print('t statistic:', t_statistic)
    print('p value:', p_value)

    navie_psnr_rgb = np.array(navie_psnr_rgb)
    linear_psnr_rgb = np.array(linear_psnr_rgb)
    pu21_psnr_rgb = np.array(pu21_psnr_rgb)
    pq_psnr_rgb = np.array(pq_psnr_rgb)
    linear_smape_psnr_rgb = np.array(linear_smape_psnr_rgb)
    linear_pu_psnr_rgb = np.array(linear_pu_psnr_rgb)
    linear_pq_psnr_rgb = np.array(linear_pq_psnr_rgb)
    linear_mu_psnr_rgb = np.array(linear_mu_psnr_rgb)
    mu_l1_psnr_rgb = np.array(mu_psnr_rgb)
    pu21_psnr_rgb = np.array(pu21_psnr_rgb)

    psnr_rgb_df = pd.DataFrame({'pq-l1': pq_psnr_rgb, 'mu-l1': mu_l1_psnr_rgb, 'linear-mu': linear_mu_psnr_rgb, 'linear-smape': linear_smape_psnr_rgb, 'linear-pu': linear_pu_psnr_rgb, 'linear-pq': linear_pq_psnr_rgb, 'linear-l1': linear_psnr_rgb, 'pu21-l1': pu21_psnr_rgb, "navie": navie_psnr_rgb,})

    print(np.median(navie_psnr_rgb), np.median(linear_psnr_rgb), np.median(pu21_psnr_rgb), np.median(pq_psnr_rgb), np.median(linear_smape_psnr_rgb), np.median(linear_pu_psnr_rgb), np.median(linear_pq_psnr_rgb), np.median(linear_mu_psnr_rgb), np.median(mu_l1_psnr_rgb), np.median(mu_l1_psnr_rgb), np.median(pu21_psnr_rgb))
    print('\n')

    navie_psnr_y = np.array(navie_psnr_y)
    linear_psnr_y = np.array(linear_psnr_y)
    pu21_psnr_y = np.array(pu21_psnr_y)
    pq_psnr_y = np.array(pq_psnr_y)
    linear_smape_psnr_y = np.array(linear_smape_psnr_y)
    linear_pu_psnr_y = np.array(linear_pu_psnr_y)
    linear_pq_psnr_y = np.array(linear_pq_psnr_y)
    linear_mu_psnr_y = np.array(linear_mu_psnr_y)
    mu_l1_psnr_y = np.array(mu_psnr_y)
    pu21_psnr_y = np.array(pu21_psnr_y)

    print(np.median(navie_psnr_y), np.median(linear_psnr_y), np.median(pu21_psnr_y), np.median(pq_psnr_y), np.median(linear_smape_psnr_y), np.median(linear_pu_psnr_y), np.median(linear_pq_psnr_y), np.median(linear_mu_psnr_y), np.median(mu_l1_psnr_y), np.median(mu_l1_psnr_y), np.median(pu21_psnr_y))
    print('\n')

    psnr_y_df = pd.DataFrame({ 'pq-l1': pq_psnr_y, 'mu-l1': mu_l1_psnr_y, 'linear-smape': linear_smape_psnr_y, 'linear-pu': linear_pu_psnr_y, 'linear-mu': linear_mu_psnr_y, 'linear-l1': linear_psnr_y, 'linear-pq': linear_pq_psnr_y, 'pu21-l1': pu21_psnr_y})

    navie_cvvdp = np.array(navie_cvvdp)
    linear_cvvdp = np.array(linear_cvvdp)
    pu21_cvvdp = np.array(pu21_cvvdp)
    pq_cvvdp = np.array(pq_cvvdp)
    linear_smape_cvvdp = np.array(linear_smape_cvvdp)
    linear_pu_cvvdp = np.array(linear_pu_cvvdp)
    linear_pq_cvvdp = np.array(linear_pq_cvvdp)
    linear_mu_cvvdp = np.array(linear_mu_cvvdp)
    mu_l1_cvvdp = np.array(mu_cvvdp)
    pu21_cvvdp = np.array(pu21_cvvdp)
    # print(np.mean(navie_cvvdp), np.mean(linear_cvvdp), np.mean(pu_cvvdp), np.mean(pq_cvvdp))
    # cvvdp_df = pd.DataFrame({'navie_cvvdp': navie_cvvdp, 'linear_cvvdp': linear_cvvdp, 'pu_cvvdp': pu_cvvdp, 'pq_cvvdp': pq_cvvdp})

    print(np.median(navie_cvvdp), np.median(linear_cvvdp), np.median(pu21_cvvdp), np.median(pq_cvvdp), np.median(linear_smape_cvvdp), np.median(linear_pu_cvvdp), np.median(linear_pq_cvvdp), np.median(linear_mu_cvvdp), np.median(mu_l1_cvvdp), np.median(mu_l1_cvvdp), np.median(pu21_cvvdp))
    print('\n')


    # cvvdp_df = pd.DataFrame({'linear_l1': linear_cvvdp, 'linear_smape': linear_smape_cvvdp, 'linear_pu': linear_pu_cvvdp, 'linear_pq':linear_pq_cvvdp, 'linear_mu': linear_mu_cvvdp, 'pu_l1': pu_cvvdp, 'pq_l1': pq_cvvdp, 'mu_l1': mu_l1_cvvdp, 'pu21_l1': pu21_cvvdp})

    cvvdp_df = pd.DataFrame({'pq-l1': pq_cvvdp, 'linear-pu': linear_pu_cvvdp, 'linear-l1': linear_cvvdp, 'linear-smape': linear_smape_cvvdp, 'linear-pq': linear_pq_cvvdp, 'linear-mu': linear_mu_cvvdp, 'mu-l1': mu_l1_cvvdp, 'pu21-l1': pu21_cvvdp, "navie": navie_cvvdp,})

    linear_ssim = np.array(linear_ssim)
    pu21_ssim = np.array(pu21_ssim)
    pq_ssim = np.array(pq_ssim)
    linear_smape_ssim = np.array(linear_smape_ssim)
    linear_pu_ssim = np.array(linear_pu_ssim)
    linear_pq_ssim = np.array(linear_pq_ssim)
    linear_mu_ssim = np.array(linear_mu_ssim)
    mu_l1_ssim = np.array(mu_ssim)
    pu21_ssim = np.array(pu21_ssim)

    print(np.median(navie_ssim), np.median(linear_ssim), np.median(pu21_ssim), np.median(pq_ssim), np.median(linear_smape_ssim), np.median(linear_pu_ssim), np.median(linear_pq_ssim), np.median(linear_mu_ssim), np.median(mu_l1_ssim), np.median(mu_l1_ssim), np.median(pu21_ssim))
    print('\n')


    ssim_df = pd.DataFrame({'pq-l1': pq_ssim, 'pu21-l1': pu21_ssim, 'mu-l1': mu_l1_ssim, 'linear-pu': linear_pu_ssim, 'linear-pq': linear_pq_ssim, 'linear-smape': linear_smape_ssim, 'linear-mu': linear_mu_ssim, 'linear-l1': linear_ssim, 'navie': navie_ssim,})


    sns.set_theme(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1.8, color_codes=True, rc=None)


    plot(psnr_rgb_df, "dncnn_psnr-rgb")

    plot(psnr_y_df, "dncnn_psnr-y")

    plot(cvvdp_df, "dncnn_cvvdp")

    plot(ssim_df, "dncnn_ssim")



"""
------------------- denoise -------------------
********************************************* sadnet *********************************************
t statistic: -2.072782527196378
p value: 0.038959117362583624
linear_l1: 46.005227976190476, linear_smape: 46.470863095238094, linear_pu: 46.17519047619047, linear_pq: 46.404249404761906, linear_mu: 46.71656607142857, pu_l1: 49.07723452380952, pq_l1: 48.97407976190476
linear_l1: 58.482685119047616, linear_smape: 60.13486904761904, linear_pu: 59.69002976190476, linear_pq: 59.42111309523809, linear_mu: 59.84329285714286, pu_l1: 62.4104994047619, pq_l1: 61.890548214285715
linear_l1: 9.197773214285714, linear_smape: 9.194267261904761, linear_pu: 9.17535773809524, linear_pq: 9.217415476190476, linear_mu: 9.110339285714286, pu_l1: 9.274220238095237, pq_l1: 9.307560714285714
********************************************* dncnn *********************************************
t statistic: -9.355603654014415
p value: 2.1203131044722207e-20
40.84118182711199 46.16241561886051 45.24893094302554
52.222121119842825 60.26224695481336 59.45548172888015
9.048834577603143 9.198690373280945 9.199029960707268
"""
